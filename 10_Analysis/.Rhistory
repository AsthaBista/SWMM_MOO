"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"
))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
x = "Category",
y = "Number of Articles",
fill = "Type",
title = "Number of Articles by Objectives and Simulation Methods"
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
# Load necessary libraries
library(ggplot2)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("SIMULATION METHODS", 12), rep("OBJECTIVES", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(x = "Category", y = "Number of Articles") +  # Removed title
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom"
) +
scale_fill_manual(values = c("OBJECTIVES" = "blue", "SIMULATION METHODS" = "orange"))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("SIMULATION METHODS", 12), rep("OBJECTIVES", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(x = NULL, y = NULL) +  # Remove axis titles
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain") # Use sentence case
) +
scale_fill_manual(values = c("OBJECTIVES" = "#008080", "SIMULATION METHODS" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("SIMULATION METHODS", 12), rep("OBJECTIVES", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
x = "Number of articles",  # X-axis title
y = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("OBJECTIVES" = "#008080", "SIMULATION METHODS" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("SIMULATION METHODS", 12), rep("OBJECTIVES", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
y = "Number of articles",  # X-axis title
x = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("Objectives" = "#008080", "Simulation Methods" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("SIMULATION METHODS", 12), rep("OBJECTIVES", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
y = "Number of articles",  # X-axis title
x = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("Objectives" = "#008080", "Simulation Methods" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("SIMULATION METHODS", 12), rep("OBJECTIVES", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
x = "Number of articles",  # X-axis title
y = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("Objectives" = "#008080", "Simulation Methods" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("Simulation Methods", 12), rep("Objectives", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
x = "Number of articles",  # X-axis title
y = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("Objectives" = "#008080", "Simulation Methods" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("Simulation Methods", 12), rep("Objectives", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
y = "Number of articles",  # X-axis title
x = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("Objectives" = "#008080", "Simulation Methods" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("Simulation Methods", 12), rep("Objectives", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
y = "Number of articles",  # X-axis title
x = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_text(size = 16),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("Objectives" = "#008080", "Simulation Methods" = "#B22222"))  # Teal and Brick Red
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Prepare the data with custom ordering for each group in reverse order
data <- data.frame(
Category = c("SWMM", "Equations", "PCSWMM", "SUSTAIN", "L-THIA-LID",
"Analytical probabilistic method", "MUSIC", "MIKE Urban",
"GIS", "HEC-HMS", "MIKE FLOOD", "InfoSWMM",
"Cost", "Water quantity", "Water quality", "Socioenvironmental"),
Count = c(78, 8, 6, 6, 3, 2, 2, 1, 1, 1, 1, 1, 102, 96, 50, 13),
Type = c(rep("Simulation Methods", 12), rep("Objectives", 4))
)
# Set the order of Category as a factor with reverse order for each type
data$Category <- factor(data$Category, levels = rev(data$Category))
# Plot the data
ggplot(data, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flip coordinates for horizontal bars
labs(
y = "Number of articles",  # X-axis title
x = NULL  # No Y-axis title
) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_text(size = 16),
panel.border = element_rect(colour = "black", fill = NA), # Add a frame
legend.position = "bottom",
legend.title = element_blank(),  # Remove legend title
legend.text = element_text(face = "plain")  # Ensure sentence case
) +
scale_fill_manual(values = c("Objectives" = "#008080", "Simulation Methods" = "#B22222"))  # Teal and Brick Red
install.packages("MonteCarlo")
library(MonteCarlo)
ttest<-function(n,loc,scale){
# generate sample:
sample<-rnorm(n, loc, scale)
# calculate test statistic:
stat<-sqrt(n)*mean(sample)/sd(sample)
# get test decision:
decision<-abs(stat)>1.96
# return result:
return(list("decision"=decision))
}
n_grid<-c(50,100,250,500)
loc_grid<-seq(0,1,0.2)
scale_grid<-c(1,2)
# collect parameter grids in list:
param_list=list("n"=n_grid, "loc"=loc_grid, "scale"=scale_grid)
MC_result<-MonteCarlo(func=ttest, nrep=1000, param_list=param_list)
summary(MC_result)
View(MC_result)
MakeTable(output=MC_result, rows="n", cols=c("loc","scale"), digits=2, include_meta=FALSE)
install.packages("Matrix", repos = "https://cloud.r-project.org")
R.version.string
install.packages("installr")
installr::updateR()
R.version.string
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("Matrix")        # should be quick now
R.version.string
etwd("C:/Users/ABI/OneDrive - NIVA/Documents/GitHub/SWMM_MOO/10_Analysis")
setwd("C:/Users/ABI/OneDrive - NIVA/Documents/GitHub/SWMM_MOO/10_Analysis")
# Check if it's set correctly
getwd()
# 3. Load your data
# Change the file path to where your CSV is stored
df <- read.csv("1000_Selected_objectives.csv", header = TRUE, sep = ";")  # skip the first label row
df <- df[-1,-1]
head(df)
setwd("C:/Users/ABI/OneDrive - NIVA/Documents/GitHub/SWMM_MOO/10_Analysis")
# Check if it's set correctly
getwd()
# Load required libraries
library(GGally)
library(ggplot2)
# 1. Read your data
my_data <- read.csv("1000_Selected_Objectives.csv", sep=";")
# 2. Remove the first row (all zeros)
my_data <- my_data[-1, ]
# 3. Convert all columns to numeric to ensure proper scaling
my_data[] <- lapply(my_data, as.numeric)
# 4. SCALE THE DATA (Z-score normalization)
# This centers each column (mean = 0) and scales it (standard deviation = 1)
my_data_scaled <- as.data.frame(scale(my_data))
# 5. Keep the original column names for clear labeling
colnames(my_data_scaled) <- colnames(my_data)
# 6. Verify the scaling worked - means should be near 0, SDs near 1
cat("Means of scaled data (should be near 0):\n")
print(colMeans(my_data_scaled, na.rm = TRUE))
cat("\nStandard deviations of scaled data (should be near 1):\n")
print(apply(my_data_scaled, 2, sd, na.rm = TRUE))
# 7. Create the Scatterplot Matrix with SCALED data
plot_matrix_scaled <- ggpairs(
data = my_data_scaled,
title = "Scatterplot Matrix (Standardized Data - Z-scores)",
axisLabels = "show",
upper = list(
continuous = wrap("cor",
method = "pearson",
size = 4,
color = "darkred",
displayNA = FALSE)
),
lower = list(
continuous = wrap("points",
alpha = 0.6,
size = 1.5,
color = "steelblue")
),
diag = list(
continuous = wrap("densityDiag",
alpha = 0.7,
color = "darkblue",
fill = "lightblue")
)
) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# 8. Print the plot
print(plot_matrix_scaled)
# 1. Read your data
my_data <- read.csv("1000_All_Objectives.csv", sep=";")
# 2. Remove the first row (all zeros)
my_data <- my_data[-1, ]
# 3. Convert all columns to numeric to ensure proper scaling
my_data[] <- lapply(my_data, as.numeric)
# 4. SCALE THE DATA (Z-score normalization)
# This centers each column (mean = 0) and scales it (standard deviation = 1)
my_data_scaled <- as.data.frame(scale(my_data))
# 5. Keep the original column names for clear labeling
colnames(my_data_scaled) <- colnames(my_data)
# 6. Verify the scaling worked - means should be near 0, SDs near 1
cat("Means of scaled data (should be near 0):\n")
print(colMeans(my_data_scaled, na.rm = TRUE))
cat("\nStandard deviations of scaled data (should be near 1):\n")
print(apply(my_data_scaled, 2, sd, na.rm = TRUE))
# 7. Create the Scatterplot Matrix with SCALED data
plot_matrix_scaled <- ggpairs(
data = my_data_scaled,
title = "Scatterplot Matrix (Standardized Data - Z-scores)",
axisLabels = "show",
upper = list(
continuous = wrap("cor",
method = "pearson",
size = 4,
color = "darkred",
displayNA = FALSE)
),
lower = list(
continuous = wrap("points",
alpha = 0.6,
size = 1.5,
color = "steelblue")
),
diag = list(
continuous = wrap("densityDiag",
alpha = 0.7,
color = "darkblue",
fill = "lightblue")
)
) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# 8. Print the plot
print(plot_matrix_scaled)
# 1. Read your data
my_data <- read.csv("1000_All_Objectives.csv", sep=";")
head(my_data)
# 2. Remove the first row (all zeros)
my_data <- my_data[-1, -1]
head(my_data)
# 3. Convert all columns to numeric to ensure proper scaling
my_data[] <- lapply(my_data, as.numeric)
# 4. SCALE THE DATA (Z-score normalization)
# This centers each column (mean = 0) and scales it (standard deviation = 1)
my_data_scaled <- as.data.frame(scale(my_data))
# 5. Keep the original column names for clear labeling
colnames(my_data_scaled) <- colnames(my_data)
# 6. Verify the scaling worked - means should be near 0, SDs near 1
cat("Means of scaled data (should be near 0):\n")
print(colMeans(my_data_scaled, na.rm = TRUE))
cat("\nStandard deviations of scaled data (should be near 1):\n")
print(apply(my_data_scaled, 2, sd, na.rm = TRUE))
# 7. Create the Scatterplot Matrix with SCALED data
plot_matrix_scaled <- ggpairs(
data = my_data_scaled,
title = "Scatterplot Matrix (Standardized Data - Z-scores)",
axisLabels = "show",
upper = list(
continuous = wrap("cor",
method = "pearson",
size = 4,
color = "darkred",
displayNA = FALSE)
),
lower = list(
continuous = wrap("points",
alpha = 0.6,
size = 1.5,
color = "steelblue")
),
diag = list(
continuous = wrap("densityDiag",
alpha = 0.7,
color = "darkblue",
fill = "lightblue")
)
) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# 8. Print the plot
print(plot_matrix_scaled)
# 9. Save the high-quality image
ggsave("Scaled_Objectives_Scatterplot_Matrix.png",
plot = plot_matrix_scaled,
width = 14,
height = 10,
dpi = 300)
install.packages("IRkernel")
install.packages('IRkernel')
IRkernel::installspec(user = TRUE)
